package vm

import "fmt"

import 	"github.com/danwhitford/stacko/stackoval"

{{ range . }}
func (vm *VM) {{ .Name }}() error {
	a, err := vm.stack.Pop()
	if err != nil {
		return err
	}
	b, err := vm.stack.Pop()
	if err != nil {
		return err
	}

	switch {
	case a.StackoType == stackoval.StackoInt && b.StackoType == stackoval.StackoInt:
		vm.stack.Push(stackoval.StackoVal{StackoType: stackoval.StackoInt, Val: b.Val.(int) {{ .Op }} a.Val.(int)})
{{ if not .IntOnly }}
	case a.StackoType == stackoval.StackoInt && b.StackoType == stackoval.StackoFloat:
		aa := float64(a.Val.(int))
		bb := b.Val.(float64)
		vm.stack.Push(stackoval.StackoVal{StackoType: stackoval.StackoFloat, Val: bb {{ .Op }} aa})
	case a.StackoType == stackoval.StackoFloat && b.StackoType == stackoval.StackoInt:
		aa := a.Val.(float64)
		bb := float64(b.Val.(int))
		vm.stack.Push(stackoval.StackoVal{StackoType: stackoval.StackoFloat, Val: bb {{ .Op }} aa})
	case a.StackoType == stackoval.StackoFloat && b.StackoType == stackoval.StackoFloat:
		aa := a.Val.(float64)
		bb := b.Val.(float64)
		vm.stack.Push(stackoval.StackoVal{StackoType: stackoval.StackoFloat, Val: bb {{ .Op }} aa})
	default:
		return fmt.Errorf("unrecognised type %v and %v for {{ .Op }}", a.StackoType, b.StackoType)
{{ end }}
	}
	return nil
}
{{end}}
